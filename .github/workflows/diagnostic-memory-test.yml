name: Diagnostic Memory Test

on:
  workflow_dispatch:
  push:
    branches: [memory-diagnostics]

jobs:
  memory-diagnostics:
    name: Memory Usage Diagnostics
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: System Baseline
        run: |
          echo "=== GitHub Actions Runner Specs ==="
          nproc
          cat /proc/cpuinfo | grep "model name" | head -1
          
          echo -e "\n=== Memory Information ==="
          free -h
          cat /proc/meminfo | grep -E "(MemTotal|MemFree|MemAvailable|SwapTotal|SwapFree|Cached|Buffers)"
          
          echo -e "\n=== Disk Space ==="
          df -h
          
          echo -e "\n=== Current Processes ==="
          ps aux --sort=-%mem | head -20
      
      - name: Test Memory Allocation
        run: |
          echo "=== Testing memory allocation limits ==="
          
          # Test 1: Allocate 1GB
          echo "Test 1: Allocating 1GB..."
          python3 -c "import time; data = bytearray(1024*1024*1024); time.sleep(2); print('1GB allocated successfully')"
          
          # Test 2: Allocate 2GB
          echo "Test 2: Allocating 2GB..."
          python3 -c "import time; data = bytearray(2*1024*1024*1024); time.sleep(2); print('2GB allocated successfully')"
          
          # Test 3: Allocate 4GB
          echo "Test 3: Allocating 4GB..."
          python3 -c "import time; data = bytearray(4*1024*1024*1024); time.sleep(2); print('4GB allocated successfully')" || echo "4GB allocation failed"
          
          free -h
      
      - name: Test Node.js Memory Limits
        run: |
          echo "=== Testing Node.js memory limits ==="
          
          cat > memory-test.js << 'EOF'
          const os = require('os');
          const v8 = require('v8');
          
          console.log('System Memory:', (os.totalmem() / 1024 / 1024 / 1024).toFixed(2), 'GB');
          console.log('Free Memory:', (os.freemem() / 1024 / 1024 / 1024).toFixed(2), 'GB');
          
          const heapStats = v8.getHeapStatistics();
          console.log('\nV8 Heap Statistics:');
          console.log('Total Heap Size:', (heapStats.total_heap_size / 1024 / 1024).toFixed(2), 'MB');
          console.log('Used Heap Size:', (heapStats.used_heap_size / 1024 / 1024).toFixed(2), 'MB');
          console.log('Heap Size Limit:', (heapStats.heap_size_limit / 1024 / 1024).toFixed(2), 'MB');
          
          // Test memory allocation
          const arrays = [];
          try {
            for (let i = 0; i < 100; i++) {
              arrays.push(new Array(10 * 1024 * 1024).fill(0));
              if (i % 10 === 0) {
                const used = process.memoryUsage();
                console.log(`Iteration ${i}: RSS=${(used.rss / 1024 / 1024).toFixed(2)}MB, Heap=${(used.heapUsed / 1024 / 1024).toFixed(2)}MB`);
              }
            }
          } catch (e) {
            console.error('Memory allocation failed:', e.message);
          }
          EOF
          
          echo -e "\nTest 1: Default memory"
          node memory-test.js
          
          echo -e "\nTest 2: 2GB memory limit"
          NODE_OPTIONS="--max-old-space-size=2048" node memory-test.js
          
          echo -e "\nTest 3: 4GB memory limit"
          NODE_OPTIONS="--max-old-space-size=4096" node memory-test.js || echo "4GB test failed"
      
      - name: Test NPM Install Memory Usage
        run: |
          echo "=== Testing NPM install memory usage ==="
          
          # Create a test package.json
          cat > test-package.json << 'EOF'
          {
            "name": "memory-test",
            "dependencies": {
              "@types/node": "^20.0.0",
              "typescript": "^5.0.0",
              "eslint": "^8.0.0",
              "@typescript-eslint/parser": "^6.0.0",
              "@typescript-eslint/eslint-plugin": "^6.0.0"
            }
          }
          EOF
          
          mkdir -p memory-test
          cp test-package.json memory-test/package.json
          cd memory-test
          
          # Monitor memory during npm install
          (while true; do 
            ps aux | grep "npm\|node" | grep -v grep
            free -m
            sleep 2
          done) &
          MONITOR_PID=$!
          
          NODE_OPTIONS="--max-old-space-size=2048" npm install --no-audit --no-fund
          
          kill $MONITOR_PID 2>/dev/null || true
          
          cd ..
          rm -rf memory-test test-package.json
      
      - name: Check System Limits
        run: |
          echo "=== System Resource Limits ==="
          ulimit -a
          
          echo -e "\n=== Cgroup Limits ==="
          if [ -f /sys/fs/cgroup/memory/memory.limit_in_bytes ]; then
            echo "Memory limit: $(cat /sys/fs/cgroup/memory/memory.limit_in_bytes)"
          fi
          
          if [ -f /sys/fs/cgroup/memory.max ]; then
            echo "Memory max (v2): $(cat /sys/fs/cgroup/memory.max)"
          fi
          
          echo -e "\n=== Process Limits ==="
          cat /proc/self/limits
      
      - name: Final Report
        if: always()
        run: |
          echo "=== Final System State ==="
          free -h
          
          echo -e "\n=== Kernel Messages ==="
          sudo dmesg | tail -50 | grep -i "memory\|oom\|kill" || echo "No memory-related kernel messages"