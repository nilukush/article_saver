name: CI/CD

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18.19.0'
  NPM_VERSION: '10.2.5'

jobs:
  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - name: Maximize build space
        run: |
          echo "=== Before cleanup ==="
          df -h
          
          # Remove unnecessary tools
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/share/boost
          sudo apt-get clean
          
          echo "=== After cleanup ==="
          df -h
      
      - name: Setup swap space
        run: |
          sudo swapoff -a
          sudo fallocate -l 10G /mnt/swapfile
          sudo chmod 600 /mnt/swapfile
          sudo mkswap /mnt/swapfile
          sudo swapon /mnt/swapfile
          echo "=== Swap enabled ==="
          free -m
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup npm
        run: |
          npm install -g npm@${{ env.NPM_VERSION }}
          npm config set audit false
          npm config set fund false
          npm config set progress false
          npm config set prefer-offline true
          npm config set maxsockets 5
          npm config set fetch-retries 5
          npm config set fetch-retry-maxtimeout 120000
      
      - name: Cache npm dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            ~/.npm
            node_modules
            backend/node_modules
            desktop/node_modules
          key: ${{ runner.os }}-npm-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.NODE_VERSION }}-
      
      - name: System diagnostics before install
        run: |
          echo "=== System resources before npm ci ==="
          free -m
          df -h
          node -e "console.log('Heap limit:', require('v8').getHeapStatistics().heap_size_limit / 1024 / 1024, 'MB')"
      
      - name: Install dependencies
        env:
          NODE_OPTIONS: --max-old-space-size=6144
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
        run: |
          echo "=== Installing dependencies ==="
          # Clear npm cache to free memory
          npm cache clean --force
          
          # Install with optimizations for large monorepo
          npm ci --prefer-offline --no-audit --no-fund --no-optional
          
          echo "=== Dependencies installed ==="
      
      - name: System diagnostics after install
        if: always()
        run: |
          echo "=== System resources after npm ci ==="
          free -m
      
      - name: Generate Prisma client
        working-directory: backend
        run: npm run db:generate
      
      - name: Lint code
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          echo "=== Linting Backend ==="
          cd backend
          npm run lint || echo "::warning::Backend has linting warnings"
          
          echo "=== Linting Desktop ==="
          cd ../desktop
          npm run lint || echo "::warning::Desktop has linting warnings"
      
      - name: Type check
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          echo "=== Type checking Backend ==="
          cd backend
          npm run type-check || echo "::warning::Backend has type errors"
          
          echo "=== Type checking Desktop ==="
          cd ../desktop
          npm run type-check || echo "::warning::Desktop has type errors"

  deploy-backend:
    name: Deploy Backend
    needs: test-and-lint
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          cd backend
          railway up --service backend

  build-desktop:
    name: Build Desktop App
    needs: test-and-lint
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win
          - os: ubuntu-latest
            platform: linux
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        env:
          NODE_OPTIONS: --max-old-space-size=6144
        run: |
          npm cache clean --force
          npm ci --prefer-offline --no-audit --no-fund --no-optional
      
      - name: Build desktop app
        env:
          NODE_OPTIONS: --max-old-space-size=6144
        run: |
          cd desktop
          npm run build
          npm run dist
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            desktop/release/*.exe
            desktop/release/*.dmg
            desktop/release/*.AppImage
            desktop/release/*.deb
          retention-days: 30

  create-release:
    name: Create Release
    needs: build-desktop
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: release-artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}