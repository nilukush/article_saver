name: Enterprise CI/CD

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version to release (optional, e.g., 1.0.0) - creates a new tag'
        required: false
        type: string

# Prevent multiple workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_VERSION: '20.17.0'  # LTS version compatible with npm 10.8.2
  NPM_VERSION: '10.8.2'  # Latest npm 10.x - stable and reliable
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
  NODE_OPTIONS: '--max-old-space-size=6144'  # 6GB for large monorepo
  HUSKY: 0  # Disable git hooks in CI

jobs:
  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    
    steps:
      - uses: actions/checkout@v4
      
      - name: System diagnostics
        run: |
          echo "=== System Resources ==="
          echo "CPU cores: $(nproc)"
          echo "Memory:" && free -h
          echo "Disk:" && df -h
          echo "Runner: ${{ runner.os }}-${{ runner.arch }}"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Cache npm packages (not node_modules)
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-cache-${{ runner.os }}-
            npm-cache-
      
      # Cache node_modules directly (2x faster)
      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            backend/node_modules
            desktop/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-
      
      # Cache Electron binaries
      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            ${{ env.ELECTRON_CACHE }}
            ${{ env.ELECTRON_BUILDER_CACHE }}
          key: electron-${{ runner.os }}-${{ hashFiles('desktop/package.json') }}
          restore-keys: |
            electron-${{ runner.os }}-
      
      - name: Setup npm
        run: |
          npm install -g npm@${{ env.NPM_VERSION }}
          npm config set progress false
          npm config set update-notifier false
      
      # Only install if cache miss
      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        timeout-minutes: 10
        run: |
          echo "=== Installing dependencies (cache miss) ==="
          # Install root dependencies
          npm ci --prefer-offline \
                 --no-audit \
                 --no-fund \
                 --ignore-scripts \
                 --loglevel=error
          
          # Install workspace dependencies with --ignore-scripts
          npm ci --workspaces --if-present \
                 --prefer-offline \
                 --no-audit \
                 --no-fund \
                 --ignore-scripts \
                 --loglevel=error
      
      # Run only essential postinstall scripts
      - name: Generate Prisma Client (postinstall)
        if: steps.cache-modules.outputs.cache-hit != 'true'
        working-directory: backend
        timeout-minutes: 2
        run: |
          echo "=== Generating Prisma Client ==="
          npx prisma generate
      
      # Verify Prisma client exists (for cache hit case)
      - name: Verify Prisma client
        if: steps.cache-modules.outputs.cache-hit == 'true'
        working-directory: backend
        run: |
          if [ ! -d "node_modules/.prisma/client" ]; then
            echo "Prisma client not found in cache, generating..."
            npx prisma generate
          else
            echo "Prisma client found in cache"
          fi
      
      - name: Lint code
        run: |
          echo "=== Linting Backend ==="
          cd backend && npm run lint || echo "::warning::Backend has linting warnings"
          echo "=== Linting Desktop ==="
          cd ../desktop && npm run lint || echo "::warning::Desktop has linting warnings"
      
      - name: Build TypeScript
        run: |
          echo "=== Building Backend ==="
          cd backend && npm run build
          echo "=== Building Desktop TypeScript ==="
          cd ../desktop && npm run build:electron
      
      - name: Type check
        run: |
          cd backend && npm run type-check || echo "::warning::Backend has type errors"
          cd ../desktop && npm run type-check || echo "::warning::Desktop has type errors"

  deploy-backend:
    name: Deploy Backend
    needs: test-and-lint
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "::error::RAILWAY_TOKEN secret is not set"
            echo "::error::Please add RAILWAY_TOKEN to your GitHub repository secrets"
            echo "::error::See RAILWAY_SETUP.md for instructions"
            exit 1
          fi
          cd backend
          echo "Deploying to Railway service: article_saver"
          railway up --service article_saver --detach || {
            echo "::error::Railway deployment failed"
            echo "::error::Ensure backend directory is linked to Railway project"
            echo "::error::Run 'railway link' in backend directory and select your project"
            exit 1
          }

  build-desktop:
    name: Build Desktop App
    needs: test-and-lint
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    strategy:
      fail-fast: false  # Continue building other platforms even if one fails
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win
          - os: ubuntu-22.04
            platform: linux
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Platform-specific caching
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            backend/node_modules
            desktop/node_modules
          key: modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            modules-${{ runner.os }}-
      
      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            ~/Library/Caches/electron
            ~/AppData/Local/electron/Cache
          key: electron-build-${{ runner.os }}-${{ hashFiles('desktop/package.json') }}
      
      - name: Clean workspace (rollup bug workaround)
        shell: bash
        run: |
          # Known npm bug with optional dependencies on different architectures
          # See: https://github.com/npm/cli/issues/4828
          # Clean all workspaces to ensure fresh install
          rm -rf node_modules package-lock.json
          rm -rf desktop/node_modules desktop/package-lock.json
          rm -rf backend/node_modules backend/package-lock.json
      
      - name: Install dependencies
        timeout-minutes: 15
        env:
          NODE_OPTIONS: '--max-old-space-size=6144'
          ELECTRON_SKIP_BINARY_DOWNLOAD: '1'
        shell: bash
        run: |
          # Fresh install to avoid rollup optional dependency issues
          npm install --prefer-offline --no-audit --no-fund
          
          # Install backend dependencies
          cd backend
          npm install --prefer-offline --no-audit --no-fund
          npx prisma generate
          cd ..
          
          # Install desktop dependencies with fresh package-lock.json
          cd desktop
          npm install --prefer-offline --no-audit --no-fund
          cd ..
      
      - name: Prepare build environment
        shell: bash
        run: |
          cd desktop
          # Install 7zip-bin specifically
          npm install 7zip-bin@latest --save-optional
          # Ensure native modules are rebuilt for Electron
          npx @electron/rebuild || echo "electron-rebuild not critical"
          # Fix permissions for 7zip binaries
          find node_modules/7zip-bin -name "7za" -type f -exec chmod +x {} \; || true
      
      - name: Build desktop app
        env:
          NODE_OPTIONS: '--max-old-space-size=6144'
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: 'true'
        shell: bash
        run: |
          cd desktop
          # Install app dependencies for electron-builder
          npx electron-builder install-app-deps
          # Build TypeScript and Vite first
          npm run build
          # Then package with electron-builder
          npm run dist
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            desktop/release/*.exe
            desktop/release/*.dmg
            desktop/release/*.AppImage
            desktop/release/*.deb
          retention-days: 30

  create-release:
    name: Create Release
    needs: build-desktop
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_version)
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for tagging
      
      - name: Create tag for manual release
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_version
        run: |
          VERSION="v${{ github.event.inputs.release_version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "::error::Tag $VERSION already exists"
            exit 1
          fi
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.release_version) || github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: release-artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}