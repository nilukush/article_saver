name: Optimized CI/CD

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18.19.0'
  NPM_VERSION: '10.2.5'
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

jobs:
  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-20.04  # Pin version for stability
    timeout-minutes: 45    # Increased from 30
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: false  # We'll create our own
      
      - name: Setup swap space
        run: |
          sudo swapoff -a
          sudo fallocate -l 8G /mnt/swapfile
          sudo chmod 600 /mnt/swapfile
          sudo mkswap /mnt/swapfile
          sudo swapon /mnt/swapfile
          echo "=== Swap enabled ==="
          free -m
      
      - name: Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json
            desktop/package-lock.json
      
      - name: Cache Electron binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            ${{ env.ELECTRON_CACHE }}
            ${{ env.ELECTRON_BUILDER_CACHE }}
          key: ${{ runner.os }}-electron-${{ hashFiles('desktop/package.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-
      
      - name: Configure npm for performance
        run: |
          npm install -g npm@${{ env.NPM_VERSION }}
          npm config set audit false
          npm config set fund false
          npm config set progress false
          npm config set update-notifier false
          npm config set fetch-retries 3
          npm config set fetch-retry-mintimeout 15000
          npm config set fetch-retry-maxtimeout 90000
      
      - name: Install root dependencies
        timeout-minutes: 10
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          echo "=== Installing root dependencies ==="
          npm ci --ignore-scripts --loglevel=error
      
      - name: Install backend dependencies
        timeout-minutes: 10
        working-directory: backend
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          echo "=== Installing backend dependencies ==="
          npm ci --ignore-scripts --loglevel=error
      
      - name: Install desktop dependencies
        timeout-minutes: 15
        working-directory: desktop
        env:
          NODE_OPTIONS: --max-old-space-size=4096
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1  # Skip for now, install later
        run: |
          echo "=== Installing desktop dependencies ==="
          npm ci --ignore-scripts --loglevel=error
      
      - name: Install Electron and rebuild native deps
        timeout-minutes: 10
        working-directory: desktop
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          echo "=== Installing Electron ==="
          npm install electron@28.3.3 --save-dev --loglevel=error
          
          echo "=== Installing native dependencies ==="
          npx electron-builder install-app-deps
      
      - name: Generate Prisma client
        working-directory: backend
        env:
          NODE_OPTIONS: --max-old-space-size=2048
        run: npm run db:generate
      
      - name: Run linting
        env:
          NODE_OPTIONS: --max-old-space-size=3072
        run: |
          echo "=== Linting Backend ==="
          cd backend && npm run lint || echo "::warning::Backend has linting warnings"
          
          echo "=== Linting Desktop ==="
          cd ../desktop && npm run lint || echo "::warning::Desktop has linting warnings"
      
      - name: Build TypeScript
        env:
          NODE_OPTIONS: --max-old-space-size=3072
        run: |
          echo "=== Building Backend ==="
          cd backend && npm run build
          
          echo "=== Building Desktop ==="
          cd ../desktop && npm run build:electron
      
      - name: Type check
        env:
          NODE_OPTIONS: --max-old-space-size=3072
        run: |
          echo "=== Type checking Backend ==="
          cd backend && npm run type-check || echo "::warning::Backend has type errors"
          
          echo "=== Type checking Desktop ==="
          cd ../desktop && npm run type-check || echo "::warning::Desktop has type errors"

  deploy-backend:
    name: Deploy Backend
    needs: test-and-lint
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "::error::RAILWAY_TOKEN secret is not set. Please add it to your GitHub repository secrets."
            echo "::error::Go to https://railway.com/project/<your-project-id>/settings/tokens to create a project token."
            exit 1
          fi
          
          echo "Railway token is set, proceeding with deployment..."
          cd backend
          railway up --service backend || {
            echo "::error::Railway deployment failed. Ensure your RAILWAY_TOKEN is a valid project token (not an account token)."
            exit 1
          }

  build-desktop:
    name: Build Desktop App
    needs: test-and-lint
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win
          - os: ubuntu-20.04  # Pin version
            platform: linux
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      
      - name: Free Disk Space (Linux)
        if: matrix.os == 'ubuntu-20.04'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
      
      - name: Setup Node.js with caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json
            desktop/package-lock.json
      
      - name: Cache Electron binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            ~/Library/Caches/electron
            ~/AppData/Local/electron/Cache
          key: ${{ runner.os }}-electron-build-${{ hashFiles('desktop/package.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-build-
      
      - name: Configure npm
        run: |
          npm install -g npm@${{ env.NPM_VERSION }}
          npm config set audit false
          npm config set fund false
          npm config set progress false
      
      - name: Install all dependencies
        timeout-minutes: 20
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          npm ci --ignore-scripts --loglevel=error
          cd backend && npm ci --ignore-scripts --loglevel=error
          cd ../desktop && npm ci --ignore-scripts --loglevel=error
      
      - name: Rebuild native modules
        timeout-minutes: 10
        working-directory: desktop
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          npm install electron@28.3.3 --save-dev --loglevel=error
          npx electron-builder install-app-deps
      
      - name: Build desktop app
        timeout-minutes: 15
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          cd desktop
          npm run build
          npm run dist
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            desktop/release/*.exe
            desktop/release/*.dmg
            desktop/release/*.AppImage
            desktop/release/*.deb
          retention-days: 30

  create-release:
    name: Create Release
    needs: build-desktop
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: release-artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}