name: Enterprise CI/CD

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version to release (optional, e.g., 1.0.0) - creates a new tag'
        required: false
        type: string

# Prevent multiple workflow runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_VERSION: '20.17.0'  # LTS version compatible with npm 10.8.2
  NPM_VERSION: '10.8.2'  # Latest npm 10.x - stable and reliable
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder
  NODE_OPTIONS: '--max-old-space-size=6144'  # 6GB for large monorepo
  HUSKY: 0  # Disable git hooks in CI

jobs:
  test-and-lint:
    name: Test and Lint
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    
    steps:
      - uses: actions/checkout@v4
      
      - name: System diagnostics
        run: |
          echo "=== System Resources ==="
          echo "CPU cores: $(nproc)"
          echo "Memory:" && free -h
          echo "Disk:" && df -h
          echo "Runner: ${{ runner.os }}-${{ runner.arch }}"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Cache npm packages (not node_modules)
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-cache-${{ runner.os }}-
            npm-cache-
      
      # Cache node_modules directly (2x faster)
      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            backend/node_modules
            desktop/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-
      
      # Cache Electron binaries
      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            ${{ env.ELECTRON_CACHE }}
            ${{ env.ELECTRON_BUILDER_CACHE }}
          key: electron-${{ runner.os }}-${{ hashFiles('desktop/package.json') }}
          restore-keys: |
            electron-${{ runner.os }}-
      
      - name: Setup npm
        run: |
          npm install -g npm@${{ env.NPM_VERSION }}
          npm config set progress false
          npm config set update-notifier false
      
      # Only install if cache miss
      - name: Install dependencies
        if: steps.cache-modules.outputs.cache-hit != 'true'
        timeout-minutes: 10
        run: |
          echo "=== Installing dependencies (cache miss) ==="
          # Install root dependencies
          npm ci --prefer-offline \
                 --no-audit \
                 --no-fund \
                 --ignore-scripts \
                 --loglevel=error
          
          # Install workspace dependencies with --ignore-scripts
          npm ci --workspaces --if-present \
                 --prefer-offline \
                 --no-audit \
                 --no-fund \
                 --ignore-scripts \
                 --loglevel=error
      
      # Run only essential postinstall scripts
      - name: Generate Prisma Client (postinstall)
        if: steps.cache-modules.outputs.cache-hit != 'true'
        working-directory: backend
        timeout-minutes: 2
        run: |
          echo "=== Generating Prisma Client ==="
          npx prisma generate
      
      # Verify Prisma client exists (for cache hit case)
      - name: Verify Prisma client
        if: steps.cache-modules.outputs.cache-hit == 'true'
        working-directory: backend
        run: |
          if [ ! -d "node_modules/.prisma/client" ]; then
            echo "Prisma client not found in cache, generating..."
            npx prisma generate
          else
            echo "Prisma client found in cache"
          fi
      
      - name: Lint code
        run: |
          echo "=== Linting Backend ==="
          cd backend && npm run lint || echo "::warning::Backend has linting warnings"
          echo "=== Linting Desktop ==="
          cd ../desktop && npm run lint || echo "::warning::Desktop has linting warnings"
      
      - name: Build TypeScript
        run: |
          echo "=== Building Backend ==="
          cd backend && npm run build
          echo "=== Building Desktop TypeScript ==="
          cd ../desktop && npx tsc -p tsconfig.main.json
      
      - name: Type check
        run: |
          cd backend && npm run type-check || echo "::warning::Backend has type errors"
          cd ../desktop && npm run type-check || echo "::warning::Desktop has type errors"

  deploy-backend:
    name: Deploy Backend
    needs: test-and-lint
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          if [ -z "$RAILWAY_TOKEN" ]; then
            echo "::error::RAILWAY_TOKEN secret is not set"
            echo "::error::Please add RAILWAY_TOKEN to your GitHub repository secrets"
            echo "::error::See RAILWAY_SETUP.md for instructions"
            exit 1
          fi
          cd backend
          echo "Deploying to Railway service: article_saver"
          railway up --service article_saver --detach || {
            echo "::error::Railway deployment failed"
            echo "::error::Ensure backend directory is linked to Railway project"
            echo "::error::Run 'railway link' in backend directory and select your project"
            exit 1
          }

  build-desktop:
    name: Build Desktop App
    needs: test-and-lint
    if: github.event_name == 'push' || github.event_name == 'pull_request' || startsWith(github.ref, 'refs/tags/v')
    strategy:
      fail-fast: false  # Continue building other platforms even if one fails
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win
          - os: ubuntu-22.04
            platform: linux
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Skip node_modules caching to avoid conflicts
      # Caching node_modules can cause ENOTEMPTY and permission errors in CI
      
      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
            ~/Library/Caches/electron
            ~/AppData/Local/electron/Cache
          key: electron-build-${{ runner.os }}-${{ hashFiles('desktop/package.json') }}
      
      - name: Clean workspace and caches
        shell: bash
        run: |
          # Clean all node_modules to prevent conflicts
          rm -rf node_modules desktop/node_modules backend/node_modules
          
          # Clean npm and node-gyp caches to prevent ENOTEMPTY errors
          npm cache clean --force || true
          rm -rf ~/.npm/_cacache
          rm -rf ~/.cache/node-gyp
          rm -rf ~/.node-gyp
          
          # Clean electron caches
          rm -rf ~/.cache/electron
          rm -rf ~/.cache/electron-builder
          
          # Ensure clean git status
          git clean -fdx node_modules || true
      
      - name: Install dependencies
        timeout-minutes: 20
        env:
          NODE_OPTIONS: '--max-old-space-size=7168'  # 7GB for Linux, sufficient for others
          ELECTRON_SKIP_BINARY_DOWNLOAD: '1'
          HUSKY: '0'
          npm_config_loglevel: 'error'
          npm_config_progress: 'false'
          npm_config_fund: 'false'
        shell: bash
        run: |
          # Platform-specific memory settings
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "Linux runner detected - using maximum memory settings"
            export NODE_OPTIONS='--max-old-space-size=7168'
          fi
          
          # Use npm ci for deterministic installs in CI
          echo "Installing root dependencies..."
          npm ci --ignore-scripts --no-audit --no-fund || npm install --no-audit --no-fund
          
          # Install backend dependencies sequentially
          echo "Installing backend dependencies..."
          cd backend
          npm ci --ignore-scripts --no-audit --no-fund || npm install --no-audit --no-fund
          echo "Generating Prisma client..."
          npx prisma generate
          cd ..
          
          # Install desktop dependencies
          echo "Installing desktop dependencies..."
          cd desktop
          npm ci --ignore-scripts --no-audit --no-fund || npm install --no-audit --no-fund
          
          # Run postinstall scripts separately to control memory usage
          echo "Running postinstall scripts..."
          npm run postinstall || true
          
          # Make scripts executable
          if [ -d "scripts" ]; then
            chmod +x scripts/*.sh 2>/dev/null || true
          fi
          cd ..
      
      - name: Prepare build environment
        shell: bash
        run: |
          cd desktop
          
          # Ensure electron-builder and dependencies are latest
          echo "Updating electron-builder to latest version..."
          npm install electron-builder@latest @electron/rebuild@latest --save-dev
          
          # Install platform-specific binaries with correct architecture
          echo "Installing platform-specific binaries..."
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            # Force x64 architecture for macOS CI runners
            npm install app-builder-bin@latest 7zip-bin@latest --save-dev --force --arch=x64
          else
            npm install app-builder-bin@latest 7zip-bin@latest --save-dev --force
          fi
          
          # Fix permissions BEFORE any operations
          echo "Fixing binary permissions..."
          chmod +x node_modules/.bin/* 2>/dev/null || true
          find node_modules -name "app-builder" -type f -exec chmod +x {} \; 2>/dev/null || true
          find node_modules -name "7za" -type f -exec chmod +x {} \; 2>/dev/null || true
          find node_modules -name "7z" -type f -exec chmod +x {} \; 2>/dev/null || true
          
          # Also fix at parent level for npm workspaces
          if [ -d "../node_modules" ]; then
            find ../node_modules -name "app-builder" -type f -exec chmod +x {} \; 2>/dev/null || true
          fi
      
      - name: Verify build environment
        shell: bash
        run: |
          # Show initial directory structure
          echo "Repository structure:"
          ls -la
          echo ""
          echo "Desktop directory contents:"
          ls -la desktop/
          
          # Change to desktop directory
          cd desktop
          
          # Display environment info
          echo "Node version: $(node --version)"
          echo "npm version: $(npm --version)"
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          
          # Verify package.json exists
          if [ ! -f "package.json" ]; then
            echo "ERROR: package.json not found in desktop directory"
            echo "Current path: $(pwd)"
            echo "Directory contents:"
            ls -la
            exit 1
          fi
          
          # Ensure TypeScript is available via npx
          echo "TypeScript version:"
          npx tsc --version
      
      - name: Build desktop app
        env:
          NODE_OPTIONS: '--max-old-space-size=6144'
          # Only set GH_TOKEN for release creation job, not builds
          # This prevents electron-builder from trying to create releases during build
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: 'true'
          # Explicitly disable publishing during build phase
          EP_DRAFT: 'false'
          EP_PRE_DRAFT: 'false'
          EP_GH_IGNORE_TIME: 'true'
          PUBLISH_NEVER: 'true'
        shell: bash
        run: |
          # Add node_modules/.bin to PATH
          export PATH="$PATH:./node_modules/.bin"
          # Debug current directory
          echo "Current working directory: $(pwd)"
          echo "Repository root contents:"
          ls -la
          
          # Navigate to desktop directory
          if [ -d "desktop" ]; then
            cd desktop
            echo "Changed to desktop directory: $(pwd)"
          else
            echo "ERROR: desktop directory not found from $(pwd)"
            exit 1
          fi
          
          # Verify we're in the right directory with package.json
          if [ ! -f "package.json" ]; then
            echo "ERROR: package.json not found in desktop directory"
            echo "Current directory: $(pwd)"
            echo "Directory contents:"
            ls -la
            exit 1
          fi
          
          # Run electron-builder install-app-deps with fallback
          echo "Installing electron app dependencies..."
          npx electron-builder install-app-deps || {
            echo "install-app-deps failed, trying @electron/rebuild as fallback..."
            npx @electron/rebuild
          }
          
          # Verify app-builder-bin is accessible
          echo "Verifying app-builder-bin installation..."
          if ! find node_modules -name "app-builder" -type f | head -1; then
            echo "WARNING: app-builder not found in desktop node_modules"
            echo "Installing at root level..."
            cd ..
            npm install app-builder-bin@latest --no-save --force
            cd desktop
          fi
          
          # Ensure TypeScript is available
          echo "Checking TypeScript installation..."
          if ! npx tsc --version 2>/dev/null | grep -q "Version"; then
            echo "TypeScript not found, installing..."
            npm install typescript --no-save
          fi
          
          # Build TypeScript and Vite
          echo "Running build command..."
          npm run build
          
          # Package with electron-builder
          echo "Running dist command..."
          npm run dist
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            desktop/release/*.exe
            desktop/release/*.dmg
            desktop/release/*.AppImage
            desktop/release/*.deb
          retention-days: 30

  create-release:
    name: Create Release
    needs: build-desktop
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_version)
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for tagging
      
      - name: Create tag for manual release
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_version
        run: |
          VERSION="v${{ github.event.inputs.release_version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "::error::Tag $VERSION already exists"
            exit 1
          fi
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.release_version) || github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: release-artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}