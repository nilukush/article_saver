name: Build and Deploy (Optimized)

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18.19.0'  # Use LTS version
  NPM_VERSION: '10.2.5'    # Stable npm version for workspaces
  # Note: NODE_OPTIONS cannot be set here due to GitHub Actions security restrictions.
  # It must be set in the env section of individual steps that need it.

jobs:
  # Run tests and linting
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup swap space
        run: |
          # Create additional swap space for memory-intensive operations
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo swapon --show
          free -h
      
      - name: Setup npm and environment
        run: |
          # Update npm to specific version for stability
          npm install -g npm@${{ env.NPM_VERSION }}
          
          # Set timeout configurations
          echo "SEGMENT_DOWNLOAD_TIMEOUT_MINS=15" >> $GITHUB_ENV
          
          # Configure npm for CI with extended timeouts
          npm config set audit false
          npm config set fund false
          npm config set progress false
          npm config set loglevel error
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set prefer-offline true
          npm config set fetch-timeout 300000
          npm config set maxsockets 5
          
          # Ensure no global workspaces setting
          npm config delete workspaces --location=global || true
          npm config delete workspaces --location=user || true
      
      - name: Generate package-lock files
        run: |
          # Generate lock files if they don't exist
          if [ ! -f "package-lock.json" ]; then
            echo "Generating root package-lock.json..."
            npm install --package-lock-only --workspaces-update=false
          fi
      
      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
      
      - name: Cache npm dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
            ~/.npm
            **/node_modules
          key: ${{ runner.os }}-npm-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.NODE_VERSION }}-
            ${{ runner.os }}-npm-
      
      - name: Verify npm cache
        run: |
          # Always verify npm cache to prevent corruption issues
          echo "Verifying npm cache..."
          npm cache verify || {
            echo "Cache verification failed, cleaning..."
            npm cache clean --force
          }
          
      - name: Pre-install cleanup
        run: |
          # Clean up any existing node_modules to prevent conflicts
          echo "Cleaning up existing installations..."
          rm -rf node_modules backend/node_modules desktop/node_modules
          rm -f /home/runner/.npm/_locks/* || true
          
          # Monitor system resources
          echo "System resources before install:"
          free -h
          df -h
          
      - name: Install dependencies (Method 1 - Workspace-aware)
        id: install_method1
        timeout-minutes: 20
        env:
          NODE_OPTIONS: --max-old-space-size=8192
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder
          FORCE_COLOR: 0
          HUSKY: 0
          NODE_NO_WARNINGS: 1
          JOBS: 1
          UV_THREADPOOL_SIZE: 1
        continue-on-error: true
        run: |
          echo "Installing dependencies with workspace-aware approach..."
          
          # Use npm ci if lock file exists, otherwise npm install
          if [ -f "package-lock.json" ]; then
            echo "Using npm ci with workspaces..."
            npm ci --no-audit --no-fund --prefer-offline || exit 1
          else
            echo "Using npm install with workspaces..."
            npm install --no-audit --no-fund --prefer-offline || exit 1
          fi
          
          echo "Dependencies installed successfully"
          echo "Final system resources:"
          free -h
          df -h
      
      - name: Install dependencies (Method 2 - Sequential)
        if: steps.install_method1.outcome == 'failure'
        timeout-minutes: 20
        env:
          NODE_OPTIONS: --max-old-space-size=8192
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          FORCE_COLOR: 0
          HUSKY: 0
          NODE_NO_WARNINGS: 1
          JOBS: 1
          UV_THREADPOOL_SIZE: 1
        run: |
          echo "Falling back to sequential installation..."
          
          # Clean everything first
          rm -rf node_modules backend/node_modules desktop/node_modules
          rm -f package-lock.json backend/package-lock.json desktop/package-lock.json
          npm cache clean --force
          
          # Install root dependencies first
          echo "Installing root dependencies..."
          npm install --no-workspaces --no-audit --no-fund --legacy-peer-deps
          
          # Wait a bit for system to stabilize
          sleep 5
          
          # Install backend dependencies
          echo "Installing backend dependencies..."
          cd backend
          npm install --no-audit --no-fund --legacy-peer-deps
          cd ..
          
          # Wait again
          sleep 5
          
          # Install desktop dependencies
          echo "Installing desktop dependencies..."
          cd desktop
          npm install --no-audit --no-fund --legacy-peer-deps
          cd ..
          
          echo "All dependencies installed successfully"
          echo "Final system resources:"
          free -h
          df -h
      
      - name: Generate Prisma client
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          cd backend
          npm run db:generate
      
      - name: Run linter
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          cd backend && npm run lint:ci
          cd ../desktop && npm run lint || true
      
      - name: Run type checking
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          cd backend && npm run type-check || true
          cd ../desktop && npm run type-check
      
      # Add tests when available
      # - name: Run tests
      #   run: npm test

  # Deploy backend to Railway (only on main branch)
  deploy-backend:
    name: Deploy Backend to Railway
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          cd backend
          railway up --service backend
      
      - name: Health Check
        run: |
          sleep 30
          curl -f ${{ secrets.BACKEND_URL }}/api/health || exit 1

  # Build desktop apps for all platforms
  build-desktop:
    name: Build Desktop App
    needs: test
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: mac
            arch: universal
          - os: windows-latest
            platform: win
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Free Disk Space (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup npm and environment
        run: |
          # Update npm
          npm install -g npm@${{ env.NPM_VERSION }}
          
          # Set timeout configurations (NODE_OPTIONS must be set per-step due to security restrictions)
          echo "SEGMENT_DOWNLOAD_TIMEOUT_MINS=15" >> $GITHUB_ENV
          
          # Configure npm with extended timeouts
          npm config set audit false
          npm config set fund false
          npm config set progress false
          npm config set fetch-retries 5
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set prefer-offline true
          npm config set fetch-timeout 300000
          npm config set maxsockets 5
        env:
          NODE_OPTIONS: --max-old-space-size=6144
      
      - name: Get npm cache directory
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.npm-cache-dir.outputs.dir }}
            ~/.cache/electron
            ~/.cache/electron-builder
            **/node_modules
          key: ${{ runner.os }}-build-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.NODE_VERSION }}-
            ${{ runner.os }}-build-
      
      - name: Clear npm cache if needed
        run: |
          # Clear npm cache to prevent corruption issues
          npm cache verify || npm cache clean --force
          
      - name: Install dependencies
        timeout-minutes: 15
        env:
          NODE_OPTIONS: --max-old-space-size=8192
          ELECTRON_BUILDER_CACHE: ~/.cache/electron-builder
          FORCE_COLOR: 0
          HUSKY: 0
          UV_THREADPOOL_SIZE: 1
        run: |
          # Use npm ci for faster, reliable installs
          if [ -f "package-lock.json" ]; then
            npm ci --no-audit --no-fund --prefer-offline || {
              echo "npm ci failed, clearing cache and retrying..."
              npm cache clean --force
              npm ci --no-audit --no-fund
            }
          else
            npm install --no-audit --no-fund --prefer-offline || {
              echo "npm install failed, clearing cache and retrying..."
              npm cache clean --force
              npm install --no-audit --no-fund
            }
          fi
      
      - name: Setup desktop build environment
        env:
          NODE_OPTIONS: --max-old-space-size=6144
        run: |
          cd desktop
          # Run postinstall if it exists
          npm run postinstall || true
      
      - name: Build TypeScript
        env:
          NODE_OPTIONS: --max-old-space-size=6144
        run: |
          cd backend
          npm run build
          cd ../desktop
          npm run build
      
      - name: Build desktop app
        env:
          NODE_OPTIONS: --max-old-space-size=6144
          # Code signing for macOS (optional)
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          CSC_LINK: ${{ secrets.MAC_CERTS }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
          # Code signing for Windows (optional)
          WIN_CSC_LINK: ${{ secrets.WIN_CERTS }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CERTS_PASSWORD }}
          # GitHub token for auto-updater
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd desktop
          npm run dist
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: |
            desktop/release/*.exe
            desktop/release/*.dmg
            desktop/release/*.AppImage
            desktop/release/*.deb
            desktop/release/*.rpm
            desktop/release/*.zip
            desktop/release/*.tar.gz
          retention-days: 30

  # Create GitHub Release (only on version tags)
  release:
    name: Create Release
    needs: build-desktop
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release-artifacts/**/*.exe
            release-artifacts/**/*.dmg
            release-artifacts/**/*.AppImage
            release-artifacts/**/*.deb
            release-artifacts/**/*.rpm
            release-artifacts/**/*.zip
            release-artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Deploy documentation to GitHub Pages
  deploy-docs:
    name: Deploy Documentation
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Build documentation site
        run: |
          mkdir -p docs-site
          cp README.md docs-site/index.md || true
          cp API.md docs-site/api.md || true
          cp DEVELOPMENT.md docs-site/development.md || true
          cp DEPLOYMENT.md docs-site/deployment.md || true
          cp CONTRIBUTING.md docs-site/contributing.md || true
          cp SECURITY.md docs-site/security.md || true
          
          # Create a simple index.html
          cat > docs-site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Article Saver Documentation</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@1/css/pico.min.css">
          </head>
          <body>
              <main class="container">
                  <h1>Article Saver Documentation</h1>
                  <p>Enterprise-grade article management system</p>
                  <nav>
                      <ul>
                          <li><a href="https://github.com/nilukush/article_saver">GitHub Repository</a></li>
                          <li><a href="https://github.com/nilukush/article_saver/blob/main/README.md">README</a></li>
                          <li><a href="https://github.com/nilukush/article_saver/blob/main/API.md">API Documentation</a></li>
                          <li><a href="https://github.com/nilukush/article_saver/blob/main/DEVELOPMENT.md">Development Guide</a></li>
                          <li><a href="https://github.com/nilukush/article_saver/blob/main/DEPLOYMENT.md">Deployment Guide</a></li>
                      </ul>
                  </nav>
                  <section>
                      <h2>Download Latest Release</h2>
                      <p><a href="https://github.com/nilukush/article_saver/releases/latest" class="contrast">Download for Windows, macOS, and Linux</a></p>
                  </section>
              </main>
          </body>
          </html>
          EOF
      
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs-site
      
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4