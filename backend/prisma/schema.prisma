// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  provider  String?  @default("local") // 'local', 'google', 'github'
  primaryAccountId String? @map("primary_account_id") // If set, this user defers to another as primary
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  articles Article[]
  credentials Credential[]
  importSessions ImportSession[]
  linkedAccountsOwned LinkedAccount[] @relation("LinkedAccountOwner")
  linkedAccountsLinked LinkedAccount[] @relation("LinkedAccountLinked")

  @@map("users")
}

model Article {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  url               String
  title             String?
  content           String?
  excerpt           String?
  author            String?
  publishedDate     DateTime? @map("published_date")
  tags              String[]  @default([])
  isRead            Boolean   @default(false) @map("is_read")
  isArchived        Boolean   @default(false) @map("is_archived")
  contentExtracted  Boolean   @default(false) @map("content_extracted") // Track if full content was extracted
  extractionStatus  String?   @map("extraction_status") // 'pending', 'processing', 'completed', 'failed'
  savedAt           DateTime  @default(now()) @map("saved_at") // When originally saved (in Pocket or Article Saver)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([savedAt])
  @@index([createdAt])
  @@index([isRead])
  @@index([isArchived])
  @@map("articles")
}

model Credential {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  credentialId    String   @unique @map("credential_id")
  publicKey       String   @map("public_key")
  counter         BigInt   @default(0)
  deviceType      String   @map("device_type")
  backedUp        Boolean  @default(false) @map("backed_up")
  transports      String[] @default([])
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([credentialId])
  @@map("credentials")
}

model ImportSession {
  id        String   @id
  userId    String   @map("user_id")
  source    String   // 'pocket' or 'manual'
  status    String   @default("pending") // 'pending', 'running', 'completed', 'failed', 'cancelled'
  progress  Json     @default("{}")
  metadata  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId, source])
  @@index([status])
  @@index([createdAt])
  @@index([userId, status])
  @@index([source, status])
  @@map("import_sessions")
}

model LinkedAccount {
  id              String   @id @default(uuid())
  primaryUserId   String   @map("primary_user_id")
  linkedUserId    String   @map("linked_user_id")
  verificationCode String?  @map("verification_code") // For email verification
  verified        Boolean  @default(false)
  linkedAt        DateTime @default(now()) @map("linked_at")
  
  // Relations
  primaryUser User @relation("LinkedAccountOwner", fields: [primaryUserId], references: [id], onDelete: Cascade)
  linkedUser  User @relation("LinkedAccountLinked", fields: [linkedUserId], references: [id], onDelete: Cascade)
  
  // Ensure unique linking (can't link same accounts multiple times)
  @@unique([primaryUserId, linkedUserId])
  
  // Indexes
  @@index([primaryUserId])
  @@index([linkedUserId])
  @@index([verified])
  @@map("linked_accounts")
}

model AccountLinkingAudit {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  linkedId    String?  @map("linked_id")
  action      String   // 'link_initiated', 'link_verified', 'link_rejected', 'unlinked', 'articles_migrated', 'articles_moved', 'primary_set'
  performedBy String   @map("performed_by") // User ID who performed the action
  metadata    Json     @default("{}") // Additional data about the action
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Indexes
  @@index([userId])
  @@index([linkedId])
  @@index([action])
  @@index([createdAt])
  @@map("account_linking_audits")
}
